generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String       @id @default(uuid())
  name             String?
  email            String       @unique
  emailVerified    Boolean      @default(false)
  organizationName String
  image            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accounts         Account[]
  attendances      Attendance[]
  forms            Form[]
  sessions         Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String    @unique
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Form {
  id          String       @id @default(cuid())
  userId      String
  topic       String
  description String
  categories  String?
  status      String
  link        String       @unique
  submissions Int
  type        Type
  accessMode  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  datas       Data[]
  fields      Field[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("form")
}

model Field {
  id       String  @id @default(cuid())
  formId   String
  label    String
  type     String
  category String?
  required Boolean
  form     Form    @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("field")
}

model Data {
  id          String       @id @default(cuid())
  data        Json
  formId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("data")
}

model Attendance {
  id        String   @id @default(cuid())
  formId    String
  dataId    String
  userId    String
  date      DateTime
  status    String
  session   String?
  markedAt  DateTime @default(now())
  markedBy  String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Data     @relation(fields: [dataId], references: [id], onDelete: Cascade)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([formId, dataId, date])
  @@map("attendance")
}

enum Type {
  Private
  Public
}
